{"version":3,"sources":["components/UserPost/UserPost.tsx","components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm/NewCommentForm.tsx","api/requests.ts","components/PostComment/PostComment.tsx","components/PostDetails/PostDetails.tsx","components/UserInfo/UserInfo.tsx","components/UserSelector/UserSelector.tsx","App.tsx","index.tsx"],"names":["UserPost","post","selectedPost","setSelectedPost","id","title","useState","isClicked","setIsClicked","useEffect","className","type","cn","onClick","PostsList","posts","map","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postId","handleAddComment","nameQuery","setNameQuery","emailQuery","setEmailQuery","bodyQuery","setBodyQuery","nameHasError","setNameHasError","emailHasError","setEmailHasError","bodyHasError","setBodyHasError","isLoading","setIsLoading","handleOnSubmit","e","preventDefault","comment","hasError","trim","name","email","finally","onSubmit","event","htmlFor","placeholder","value","onChange","target","PostComment","handleDeleteClick","href","PostDetails","error","setError","comments","setComments","formVisibility","setFormVisibility","catch","clickedCommentId","prev","filter","length","UserInfo","user","setSelectedUser","UserSelector","users","selectedUser","isActive","setIsActive","selectorRef","useRef","handleClickOutside","current","contains","document","addEventListener","removeEventListener","handleOnSelect","ref","role","App","setUsers","userPosts","setUserPosts","userId","useCallback","ReactDOM","render","getElementById"],"mappings":"+QAUaA,EAA4B,SAAC,GAInC,IAHLC,EAGI,EAHJA,KACAC,EAEI,EAFJA,aACAC,EACI,EADJA,gBAEQC,EAAcH,EAAdG,GAAIC,EAAUJ,EAAVI,MACZ,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,YACQ,OAAZP,QAAY,IAAZA,OAAA,EAAAA,EAAcE,MAAOA,GACvBI,GAAa,KAEd,CAACN,IAYJ,OACE,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBE,IAEtB,oBAAI,UAAQ,YAAZ,SACGC,IAGH,oBAAIK,UAAU,8BAAd,SACE,wBACEC,KAAK,SACL,UAAQ,aACRD,UAAWE,IACT,SACA,WACA,CACE,YAAaL,IAGjBM,QA7Be,WAEnBV,EADEI,EACc,KAEAN,GAGlBO,GAAcD,IAYV,mBAYOA,EAAqB,QAAT,gBC7CdO,EAA6B,SAAC,GAAD,IACxCC,EADwC,EACxCA,MACAb,EAFwC,EAExCA,aACAC,EAHwC,EAGxCA,gBAHwC,OAKxC,sBAAK,UAAQ,YAAb,UACE,mBAAGO,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGK,EAAMC,KAAI,SAAAf,GAAI,OACb,cAAC,EAAD,CACEA,KAAMA,EACNC,aAAcA,EAEdC,gBAAiBA,GADZF,EAAKG,gB,OC9BTa,G,MAAS,kBACpB,qBAAKP,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCJbQ,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IADzBY,EAEL,SAAIZ,EAAaE,GAAjB,OAA+BH,EAAWC,EAAK,OAAQE,IAFlDU,EAIH,SAACZ,GAAD,OAAiBD,EAAQC,EAAK,WC3B3Ba,EAAkC,SAAC,GAGzC,IAFLC,EAEI,EAFJA,OACAC,EACI,EADJA,iBAEA,EAAkClC,mBAAS,IAA3C,mBAAOmC,EAAP,KAAkBC,EAAlB,KACA,EAAoCpC,mBAAS,IAA7C,mBAAOqC,EAAP,KAAmBC,EAAnB,KACA,EAAkCtC,mBAAS,IAA3C,mBAAOuC,EAAP,KAAkBC,EAAlB,KACA,EAAwCxC,oBAAS,GAAjD,mBAAOyC,EAAP,KAAqBC,EAArB,KACA,EAA0C1C,oBAAS,GAAnD,mBAAO2C,EAAP,KAAsBC,EAAtB,KACA,EAAwC5C,oBAAS,GAAjD,mBAAO6C,EAAP,KAAqBC,EAArB,KACA,EAAkC9C,oBAAS,GAA3C,mBAAO+C,EAAP,KAAkBC,EAAlB,KA0BMC,EAAiB,SAACC,GACtBA,EAAEC,iBAEF,IC5BuBC,ED4BnBC,GAAW,GAEVlB,EAAUmB,SACbZ,GAAgB,GAChBW,GAAW,GAGRhB,EAAWiB,SACdV,GAAiB,GACjBS,GAAW,GAGRd,EAAUe,SACbR,GAAgB,GAChBO,GAAW,GAGTA,KAIJL,GAAa,ICjDUI,EDmDJ,CACjBnB,SACAsB,KAAMpB,EACNqB,MAAOnB,EACPd,KAAMgB,GCtDHR,EAAqB,YAAaqB,ID0DpCzB,MAAK,SAAAE,GACJK,EAAiBL,GACjBW,EAAa,OAEdiB,SAAQ,WACPT,GAAa,QAInB,OACE,uBAAM,UAAQ,iBAAiBU,SAAU,SAACC,GAAD,OAAWV,EAAeU,IAAnE,UACE,sBAAKvD,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQwD,QAAQ,sBAAjC,yBAIA,sBAAKxD,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLkD,KAAK,OACLzD,GAAG,sBACH+D,YAAY,eACZzD,UAAWE,IACT,QACA,CACE,YAAamC,IAGjBqB,MAAO3B,EACP4B,SAAU,SAACJ,GAAD,OA9EMT,EA8EsBS,EA7E9CjB,GAAgB,QAChBN,EAAac,EAAEc,OAAOF,OAFC,IAACZ,KAiFlB,sBAAM9C,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGdqC,GACC,sBACErC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBqC,GACC,mBAAGrC,UAAU,iBAAiB,UAAQ,eAAtC,iCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQwD,QAAQ,uBAAjC,0BAIA,sBAAKxD,UAAU,yCAAf,UACE,uBACEC,KAAK,OACLkD,KAAK,QACLzD,GAAG,uBACH+D,YAAY,iBACZzD,UAAWE,IACT,QACA,CACE,YAAaqC,IAGjBmB,MAAOzB,EACP0B,SAAU,SAACJ,GAAD,OAnHOT,EAmHsBS,EAlH/Cf,GAAiB,QACjBN,EAAcY,EAAEc,OAAOF,OAFC,IAACZ,KAsHnB,sBAAM9C,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGduC,GACC,sBACEvC,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAKlBuC,GACC,mBAAGvC,UAAU,iBAAiB,UAAQ,eAAtC,kCAMJ,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQwD,QAAQ,eAAjC,0BAIA,qBAAKxD,UAAU,UAAf,SACE,0BACEN,GAAG,eACHyD,KAAK,OACLM,YAAY,oBACZzD,UAAWE,IACT,WACA,CACE,YAAauC,IAGjBiB,MAAOvB,EACPwB,SAAU,SAACJ,GAAD,OAvJMT,EAuJsBS,EAtJ9Cb,GAAgB,QAChBN,EAAaU,EAAEc,OAAOF,OAFC,IAACZ,OA2JnBL,GACC,mBAAGzC,UAAU,iBAAiB,UAAQ,eAAtC,gCAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,aAAcyC,IANpB,mBAcF,qBAAK3C,UAAU,UAAf,SAEE,wBACEC,KAAK,QACLD,UAAU,0BACVG,QA1MgB,WACxB6B,EAAa,IACbM,GAAgB,GAChBJ,EAAc,IACdM,GAAiB,GACjBJ,EAAa,IACbM,GAAgB,IAiMV,4BErNGmB,EAA8B,SAAC,GAAoC,IAAlCb,EAAiC,EAAjCA,QAASc,EAAwB,EAAxBA,kBAEnD3C,EACE6B,EADF7B,KAAMgC,EACJH,EADIG,KAAMC,EACVJ,EADUI,MAAO1D,EACjBsD,EADiBtD,GAGrB,OACE,0BAASM,UAAU,mBAAmB,UAAQ,UAA9C,UACE,sBAAKA,UAAU,iBAAf,UACE,mBAAG+D,KAAI,iBAAYX,GAAS,UAAQ,gBAApC,SACGD,IAEH,wBACE,UAAQ,gBACRlD,KAAK,SACLD,UAAU,kBACV,aAAW,SACXG,QAAS,kBAAM2D,EAAkBpE,IALnC,8BAWF,qBAAKM,UAAU,eAAe,UAAQ,cAAtC,SACGmB,QCnBI6C,EAA+B,SAAC,GAAc,IAAZzE,EAAW,EAAXA,KACrCG,EAAoBH,EAApBG,GAAIC,EAAgBJ,EAAhBI,MAAOwB,EAAS5B,EAAT4B,KAEnB,EAAkCvB,oBAAS,GAA3C,mBAAO+C,EAAP,KAAkBC,EAAlB,KACA,EAA0BhD,oBAAS,GAAnC,mBAAOqE,EAAP,KAAcC,EAAd,KACA,EAAgCtE,mBAAoB,IAApD,mBAAOuE,EAAP,KAAiBC,EAAjB,KACA,EAA4CxE,oBAAS,GAArD,mBAAOyE,EAAP,KAAuBC,EAAvB,KAEAvE,qBAAU,WFPmB,IAAC8B,EEQ5Be,GAAa,GACbsB,GAAS,IFTmBrC,EEWZnC,EFVXiC,EAAA,2BAA2CE,KEW7CN,MAAK,SAAAE,GACJ2C,EAAY3C,MAEb8C,OAAM,WACLL,GAAS,MAEVb,SAAQ,WACPT,GAAa,QAEhB,CAACrD,IAEJ,IAAMuE,EAAoB,SAACU,GACzBJ,GAAY,SAAAK,GAAI,OACdA,EAAKC,QAAO,SAAA1B,GAAO,OAAIA,EAAQtD,KAAO8E,QFpBnC7C,EAAA,oBEsBajC,KAWpB,OACE,qBAAKM,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,oBACON,EADP,aACcC,KAGd,mBAAG,UAAQ,WAAX,SACGwB,OAIL,sBAAKnB,UAAU,QAAf,UACG2C,GAAa,cAAC,EAAD,IAEbsB,GACC,qBAAKjE,UAAU,yBAAyB,UAAQ,gBAAhD,mCAKCmE,EAASQ,SAAWhC,IAAcsB,GACnC,mBAAGjE,UAAU,aAAa,UAAQ,oBAAlC,8BAKC2C,IAAcsB,GAASE,EAASQ,OAAS,GAC1C,qCACE,mBAAG3E,UAAU,aAAb,uBAECmE,EAAS7D,KAAI,SAAA0C,GAAO,OACnB,cAAC,EAAD,CACEA,QAASA,EAETc,kBAAmBA,GADdd,EAAQtD,WAOlB2E,IAAmBJ,IAAUtB,GAC9B,wBACE,UAAQ,qBACR1C,KAAK,SACLD,UAAU,iBACVG,QAvDY,WACtBmE,GAAkB,IAkDV,gCAYHD,GACI,cAAC,EAAD,CAAgBxC,OAAQnC,EAAIoC,iBA5Dd,SAACkB,GACxBoB,GAAY,SAAAK,GAAI,4BAAQA,GAAR,CAAczB,gBCrCrB4B,EAA4B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,gBACxCpF,EAAamF,EAAbnF,GAAIyD,EAAS0B,EAAT1B,KAEZ,OACE,mBAAGY,KAAI,gBAAWrE,GAAMM,UAAU,gBAAgBG,QAAS,SAACoD,GAAD,OAAWuB,EAAgBvB,EAAOsB,IAA7F,SACG1B,KCHM4B,EAAgC,SAAC,GAIvC,IAHLC,EAGI,EAHJA,MACAC,EAEI,EAFJA,aACAH,EACI,EADJA,gBAEA,EAAgClF,oBAAS,GAAzC,mBAAOsF,EAAP,KAAiBC,EAAjB,KACMC,EAAcC,iBAA8B,MAElDtF,qBAAU,WACR,IAAMuF,EAAqB,SAAC/B,GACtB6B,EAAYG,UACVH,EAAYG,QAAQC,SAASjC,EAAMK,SACvCuB,GAAY,IAMhB,OAFAM,SAASC,iBAAiB,QAASJ,GAE5B,WACLG,SAASE,oBAAoB,QAASL,MAEvC,IAEH,IAIMM,EAAiB,SACrBrC,EACAsB,GAEAC,EAAgBvB,EAAOsB,GACvBM,GAAY,IAGd,OACE,sBACE,UAAQ,eACRnF,UAAU,qBACV6F,IAAKT,EAHP,UAKE,qBAAKpF,UAAU,mBAAf,SACE,yBACEC,KAAK,SACLD,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdG,QAxBoB,WAC1BgF,GAAY,SAAAV,GAAI,OAAKA,MAkBjB,UAOE,+BACGQ,EAAeA,EAAa9B,KAAO,kBAGtC,sBAAMnD,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,gBAKlDkF,GACC,qBAAKlF,UAAU,gBAAgBN,GAAG,gBAAgBoG,KAAK,OAAvD,SACE,qBAAK9F,UAAU,mBAAf,SACGgF,EAAM1E,KAAI,SAAAuE,GAAI,OACb,cAAC,EAAD,CACEA,KAAMA,EACNC,gBAAiBc,GACZf,EAAKnF,eCjEbqG,EAAgB,WAC3B,MAA0BnG,mBAAiB,IAA3C,mBAAOoF,EAAP,KAAcgB,EAAd,KACA,EAAwCpG,mBAAsB,MAA9D,mBAAOqF,EAAP,KAAqBH,EAArB,KACA,EAAwClF,mBAAsB,MAA9D,mBAAOJ,EAAP,KAAqBC,EAArB,KACA,EAAkCG,oBAAS,GAA3C,mBAAO+C,EAAP,KAAkBC,EAAlB,KACA,EAAkChD,mBAAiB,IAAnD,mBAAOqG,EAAP,KAAkBC,EAAlB,KACA,EAA0BtG,oBAAS,GAAnC,mBAAOqE,EAAP,KAAcC,EAAd,KAEAnE,qBAAU,WLhBH4B,EAAmB,UKkBrBJ,MAAK,SAAAE,GACJuE,EAASvE,QAEZ,IAEH1B,qBAAU,WLpBgB,IAACoG,EKqBrBlB,IACFrC,GAAa,GACbsD,EAAa,IACbhC,GAAS,ILxBciC,EK0BVlB,EAAavF,GLzBvBiC,EAAA,wBAAoCwE,KK0BpC5E,MAAK,SAAAE,GACJyE,EAAazE,MAEd8C,OAAM,WACLL,GAAS,MAEVb,SAAQ,WACPT,GAAa,SAGlB,CAACqC,IAEJ,IAAMW,EAAiBQ,uBAAY,SACjC7C,EACAsB,GAEAtB,EAAMR,iBACN+B,EAAgBD,KACf,IAEH,OACE,sBAAM7E,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CACEgF,MAAOA,EACPC,aAAcA,EACdH,gBAAiBc,MAIrB,sBAAK5F,UAAU,QAAQ,UAAQ,cAA/B,WACIiF,GACA,mBAAG,UAAQ,iBAAX,8BAKDtC,GAAc,cAAC,EAAD,IAEdsB,GACC,qBACEjE,UAAU,yBACV,UAAQ,oBAFV,mCAQDiF,IAAiBgB,EAAUtB,SAAWhC,IAAcsB,GACnD,qBAAKjE,UAAU,0BAA0B,UAAQ,aAAjD,0BAKDiF,GAAgBgB,EAAUtB,OAAS,GAEhC,cAAC,EAAD,CACEtE,MAAO4F,EACPzG,aAAcA,EACdC,gBAAiBA,YAO7B,qBACE,UAAQ,UACRO,UAAWE,IACT,OACA,YACA,eACA,UACA,CACE,gBAAiBV,IARvB,SAYE,qBAAKQ,UAAU,gCAAf,SACGR,GAAgB,cAAC,EAAD,CAAaD,KAAMC,gBCnHlD6G,IAASC,OACP,cAAC,EAAD,IACAb,SAASc,eAAe,W","file":"static/js/main.6153c367.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  post: Post,\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const UserPost: React.FC<Props> = ({\n  post,\n  selectedPost,\n  setSelectedPost,\n}) => {\n  const { id, title } = post;\n  const [isClicked, setIsClicked] = useState(false);\n\n  useEffect(() => {\n    if (selectedPost?.id !== id) {\n      setIsClicked(false);\n    }\n  }, [selectedPost]);\n\n  const handleBtnClick = () => {\n    if (isClicked) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n\n    setIsClicked(!isClicked);\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={cn(\n            'button',\n            'is-link ',\n            {\n              'is-light': !isClicked,\n            },\n          )}\n          onClick={handleBtnClick}\n        >\n          {`${!isClicked ? 'Open' : 'Close'}`}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Post } from '../../types/Post';\nimport { UserPost } from '../UserPost/UserPost';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <UserPost\n            post={post}\n            selectedPost={selectedPost}\n            key={post.id}\n            setSelectedPost={setSelectedPost}\n          />\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { addComment } from '../../api/requests';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  postId: number,\n  handleAddComment: (comment: Comment) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  handleAddComment,\n}) => {\n  const [nameQuery, setNameQuery] = useState('');\n  const [emailQuery, setEmailQuery] = useState('');\n  const [bodyQuery, setBodyQuery] = useState('');\n  const [nameHasError, setNameHasError] = useState(false);\n  const [emailHasError, setEmailHasError] = useState(false);\n  const [bodyHasError, setBodyHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClearInputs = () => {\n    setNameQuery('');\n    setNameHasError(false);\n    setEmailQuery('');\n    setEmailHasError(false);\n    setBodyQuery('');\n    setBodyHasError(false);\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNameHasError(false);\n    setNameQuery(e.target.value);\n  };\n\n  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmailHasError(false);\n    setEmailQuery(e.target.value);\n  };\n\n  const handleBodyChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setBodyHasError(false);\n    setBodyQuery(e.target.value);\n  };\n\n  const handleOnSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    let hasError = false;\n\n    if (!nameQuery.trim()) {\n      setNameHasError(true);\n      hasError = true;\n    }\n\n    if (!emailQuery.trim()) {\n      setEmailHasError(true);\n      hasError = true;\n    }\n\n    if (!bodyQuery.trim()) {\n      setBodyHasError(true);\n      hasError = true;\n    }\n\n    if (hasError) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const newComment = {\n      postId,\n      name: nameQuery,\n      email: emailQuery,\n      body: bodyQuery,\n    };\n\n    addComment(newComment)\n      .then(response => {\n        handleAddComment(response);\n        setBodyQuery('');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={(event) => handleOnSubmit(event)}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn(\n              'input',\n              {\n                'is-danger': nameHasError,\n              },\n            )}\n            value={nameQuery}\n            onChange={(event) => handleNameChange(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {nameHasError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {nameHasError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn(\n              'input',\n              {\n                'is-danger': emailHasError,\n              },\n            )}\n            value={emailQuery}\n            onChange={(event) => handleEmailChange(event)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailHasError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {emailHasError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn(\n              'textarea',\n              {\n                'is-danger': bodyHasError,\n              },\n            )}\n            value={bodyQuery}\n            onChange={(event) => handleBodyChange(event)}\n          />\n        </div>\n\n        {bodyHasError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-link',\n              {\n                'is-loading': isLoading,\n              },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearInputs}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment []>(`/comments?postId=${postId}`);\n};\n\nexport const deletePostComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: any) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import React from 'react';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  comment: Comment,\n  handleDeleteClick: (id :number) => void,\n};\n\nexport const PostComment:React.FC<Props> = ({ comment, handleDeleteClick }) => {\n  const {\n    body, name, email, id,\n  } = comment;\n\n  return (\n    <article className=\"message is-small\" data-cy=\"Comment\">\n      <div className=\"message-header\">\n        <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n          {name}\n        </a>\n        <button\n          data-cy=\"CommentDelete\"\n          type=\"button\"\n          className=\"delete is-small\"\n          aria-label=\"delete\"\n          onClick={() => handleDeleteClick(id)}\n        >\n          delete button\n        </button>\n      </div>\n\n      <div className=\"message-body\" data-cy=\"CommentBody\">\n        {body}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport { Post } from '../../types/Post';\nimport { deletePostComment, getPostComments } from '../../api/requests';\nimport { Comment } from '../../types/Comment';\nimport { PostComment } from '../PostComment/PostComment';\n\ntype Props = {\n  post: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const { id, title, body } = post;\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [formVisibility, setFormVisibility] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setError(false);\n\n    getPostComments(id)\n      .then(response => {\n        setComments(response);\n      })\n      .catch(() => {\n        setError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [post]);\n\n  const handleDeleteClick = (clickedCommentId: number) => {\n    setComments(prev => (\n      prev.filter(comment => comment.id !== clickedCommentId)));\n\n    deletePostComment(id);\n  };\n\n  const handleFormClick = () => {\n    setFormVisibility(true);\n  };\n\n  const handleAddComment = (comment: Comment) => {\n    setComments(prev => [...prev, comment]);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!comments.length && !isLoading && !error) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(!isLoading && !error && comments.length > 0) && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <PostComment\n                  comment={comment}\n                  key={comment.id}\n                  handleDeleteClick={handleDeleteClick}\n                />\n              ))}\n            </>\n          )}\n\n          {(!formVisibility && !error && !isLoading) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleFormClick}\n            >\n              Write a comment\n            </button>\n          )}\n\n        </div>\n\n        {formVisibility\n          && <NewCommentForm postId={id} handleAddComment={handleAddComment} />}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n  setSelectedUser: (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => void;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user, setSelectedUser }) => {\n  const { id, name } = user;\n\n  return (\n    <a href={`#user-${id}`} className=\"dropdown-item\" onClick={(event) => setSelectedUser(event, user)}>\n      {name}\n    </a>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { User } from '../../types/User';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n  const selectorRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (selectorRef.current\n        && !selectorRef.current.contains(event.target as Node)) {\n        setIsActive(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  const handleDropdownClick = () => {\n    setIsActive(prev => !prev);\n  };\n\n  const handleOnSelect = (\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => {\n    setSelectedUser(event, user);\n    setIsActive(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={selectorRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdownClick}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isActive && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <UserInfo\n                user={user}\n                setSelectedUser={handleOnSelect}\n                key={user.id}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUserPosts, getUsers } from './api/requests';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    getUsers()\n      .then(response => {\n        setUsers(response);\n      });\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      setUserPosts([]);\n      setError(false);\n\n      getUserPosts(selectedUser.id)\n        .then(response => {\n          setUserPosts(response);\n        })\n        .catch(() => {\n          setError(true);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [selectedUser]);\n\n  const handleOnSelect = useCallback((\n    event: React.MouseEvent<HTMLAnchorElement, MouseEvent>,\n    user: User,\n  ) => {\n    event.preventDefault();\n    setSelectedUser(user);\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={handleOnSelect}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (<Loader />)}\n\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && !userPosts.length && !isLoading && !error && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {selectedUser && userPosts.length > 0\n                  && (\n                    <PostsList\n                      posts={userPosts}\n                      selectedPost={selectedPost}\n                      setSelectedPost={setSelectedPost}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && <PostDetails post={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}